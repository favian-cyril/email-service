// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

model User {
  id                 String        @id @default(dbgenerated("uuid_generate_v4()"))
  email              String        @unique
  firstName          String
  lastName           String
  currency           String
  additionalKeywords String[]
  userEmails         UserEmails[]
  invoices           Invoice[]
  task               Task[]
  senderEmails       SenderEmail[]
  categories         Category[]
  updatedAt DateTime @default(now()) @updatedAt
}

model SenderEmail {
  id         String    @id @default(dbgenerated("uuid_generate_v4()"))
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  email      String
  categoryId String?
  category   Category?  @relation(fields: [categoryId], references: [id])
  invoice    Invoice[]
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([id, email])
}

model Category {
  id          String        @id @default(dbgenerated("uuid_generate_v4()"))
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  senderEmail SenderEmail[]
  value       String
  color       String
  invoices    Invoice[]
  updatedAt DateTime @default(now()) @updatedAt
}

model Invoice {
  id            String      @id @default(dbgenerated("uuid_generate_v4()"))
  emailId       String
  amount        Float
  categoryId    String?
  category      Category?    @relation(fields: [categoryId], references: [id])
  otherAmounts  Float[]
  emailContent  String
  summary       String
  currency      String
  senderEmailId String
  senderEmail   SenderEmail @relation(fields: [senderEmailId], references: [id])
  isValid       Boolean
  userId        String
  emailCreated  DateTime
  created       DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  updatedAt DateTime @default(now()) @updatedAt
}

model Task {
  id               String     @id @default(dbgenerated("uuid_generate_v4()"))
  schedule         String // e.g. "0 0 * * *"
  timezone         String // e.g. "America/New_York"
  userId           String
  userEmailAddress String
  isActive         Boolean
  user             User       @relation(fields: [userId], references: [id])
  userEmail        UserEmails @relation(fields: [userEmailAddress], references: [email])
  updatedAt DateTime @default(now()) @updatedAt
}

model UserEmails {
  id           String  @id @default(dbgenerated("uuid_generate_v4()"))
  email        String  @unique
  refreshToken String
  userId       String
  taskId       String?
  task         Task[]
  user         User    @relation(fields: [userId], references: [id])
  updatedAt DateTime @default(now()) @updatedAt
}
